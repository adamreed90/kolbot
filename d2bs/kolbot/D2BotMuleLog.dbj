/**
*  @filename    D2BotMuleLogger.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for Mulelogger.js
*
*/
include("StarterConfig.js");

// D2BotMuleLog specific settings - for global settings see libs/StarterConfig.js
Starter.Config.MinGameTime = rand(150, 180); // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
Starter.Config.CreateGameDelay = 5; // Seconds to wait before creating a new game
Starter.Config.SwitchKeyDelay = 0; // Seconds to wait before switching a used/banned key or after realm down

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include("polyfill.js");
include("OOG.js");
include("MuleLogger.js");
include("DropperSetup.js");
include("common/misc.js");
include("common/util.js");
include("common/prototypes.js");
let Controls = require("./modules/Control");

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

let currAcc;
let obj = {};
const usingDroper = isIncluded("DropperSetup.js");
let [charList, accounts, chars] = [[], [], []];

const parseInfo = () => {
	usingDroper && parseDropperAccounts(accounts, chars);
	
	for (let i in MuleLogger.LogAccounts) {
		if (MuleLogger.LogAccounts.hasOwnProperty(i) && typeof i === "string") {
			accounts.push(i);
			chars.push(MuleLogger.LogAccounts[i]);
		}
	}
};

Starter.LocationEvents.login = function () {
	if (!accounts.length) {
		MuleLogger.remove();
		D2Bot.printToConsole("Done logging mules!");
		D2Bot.stop();
		return;
	}

	if (FileTools.exists("logs/MuleLog.json")) {
		obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));

		if (obj.currAcc) {
			for (let i = 0; i < accounts.length; i += 1) {
				if (accounts[i].split("/")[0] === obj.currAcc) {
					console.debug(accounts[i].split("/")[0]);
					accounts.splice(0, i);
					chars.splice(0, i);
					i -= 1;

					break;
				}
			}
		}
	}

	currAcc = accounts[0];
	currAcc = currAcc.split("/");
	charList = chars[0];
	obj.currAcc = currAcc[0];

	print("每c4Mule Logger每c2: Login account: " + currAcc[0]);
	MuleLogger.save(md5(currAcc[2].toLowerCase() + currAcc[0].toLowerCase()), currAcc[1]);

	if (ControlAction.loginAccount({account: currAcc[0], password: currAcc[1], realm: currAcc[2]})) {
		accounts.shift(); // remove current account from the list
	}
};

Starter.locations[sdk.game.locations.Lobby] = () => {
	D2Bot.updateStatus("Lobby");

	if (Starter.inGame) {
		if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
			ControlAction.timeoutDelay("Min game time wait", Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
		}

		print("updating runs");
		D2Bot.updateRuns();
		delay(1000);

		Starter.gameCount += 1;
		Starter.lastGameStatus = "ready";
		Starter.inGame = false;
		Controls.LobbyQuit.click();

		return;
	}

	Starter.LocationEvents.openCreateGameWindow();
};
Starter.locations[sdk.game.locations.LobbyChat] = Starter.locations[sdk.game.locations.Lobby];
Starter.locations[sdk.game.locations.CreateGame] = (loc) => {
	D2Bot.updateStatus("Creating Game");

	// remove level restriction
	Controls.CharacterDifference.disabled === 5 && Controls.CharacterDifferenceButton.click();
	// Max number of players
	Controls.MaxPlayerCount.setText("8");

	if (Starter.gameCount >= 99) {
		Starter.gameCount = 1;
		DataFile.updateStats("runs", Starter.gameCount);
	}

	if (Starter.lastGameStatus === "pending") {
		D2Bot.printToConsole("Failed to create game");
		Starter.gameCount += 1;
	}

	ControlAction.timeoutDelay("Make Game Delay", Starter.Config.CreateGameDelay * 1e3);
	createGame(MuleLogger.LogGame[0] + Starter.gameCount, MuleLogger.LogGame[1], 0);
	Starter.locationTimeout(5000, loc);
	Starter.lastGameStatus = "pending";
};
Starter.locations[sdk.game.locations.CharSelect] = () => {
	// Single Player screen fix
	if (getLocation() === sdk.game.locations.CharSelect && !Controls.CharSelectCurrentRealm.control && Controls.CharSelectExit.click()) {
		return;
	}

	if (!charList.length && Controls.CharSelectExit.click()) return;

	charList[0] === "all" && (charList = ControlAction.getCharacters());

	if (FileTools.exists("logs/MuleLog.json")) {
		obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));
		
		if (obj.currChar) {
			for (let i = 0; i < charList.length; i += 1) {
				if (charList[i] === obj.currChar) {
					// Remove the previous currChar as well
					charList.splice(0, i + 1);

					break;
				}
			}
		}
	}

	// last char in acc = trigger next acc
	if (!charList.length) {
		print("No more characters");
		accounts.shift(); // remove current account from the list
		chars.shift();

		return;
	}

	let currChar = charList.shift();
	obj.currChar = currChar;

	print("每c4Mule Logger每c2: Login character: " + currChar);
	FileTools.writeText("logs/MuleLog.json", JSON.stringify(obj));

	if (MuleLogger.AutoPerm) {
		let characterStatus = {
			charname: currChar,
			perm: ControlAction.getPermStatus({charName: currChar})
		};
		MuleLogger.savePermedStatus(characterStatus);
	}

	ControlAction.loginCharacter({charName: currChar});
};
Starter.locations[sdk.game.locations.NewCharSelected] = () => Controls.CharSelectExit.click();
Starter.locations[sdk.game.locations.CharSelectConnecting] = () => {
	if (!Starter.LocationEvents.charSelectError()) {
		accounts.shift(); // remove current account from the list
		chars.shift();
	}
};
Starter.locations[sdk.game.locations.CharSelectNoChars] = Starter.locations[sdk.game.locations.CharSelectConnecting];
Starter.locations[sdk.game.locations.GameNameExists] = () => Controls.CreateGameWindow.click();
Starter.locations[sdk.game.locations.GameDoesNotExist] = () => Controls.CreateGameWindow.click();
Starter.locations[sdk.game.locations.GameIsFull] = () => {
	D2Bot.printToConsole("Game is full");
	Starter.lastGameStatus = "ready";
	delay(500);
	Controls.JoinGameWindow.click();
};

function main() {
	addEventListener("copydata", Starter.receiveCopyData);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	while (!D2Bot.init()) {
		delay(250);
	}
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Starter.gameInfo.rdBlocker) {
		D2Bot.printToConsole("You must disable RD Blocker for Mule Logger to work properly. Stopping.");
		D2Bot.stop();

		return;
	}

	parseInfo();

	if (Starter.gameInfo.error) {
		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, sdk.colors.D2Bot.Gray);
		}

		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				if (!Starter.inGame) {
					print("Updating Status");
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();
					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		try {
			let loc = getLocation();
			(Starter.locations[loc] !== undefined) && Starter.locations[loc](loc);
		} catch (e) {
			console.error(e, "LOCATION: " + getLocation());
		}
		delay(1000);
	}
}
