/**
*  @filename    D2BotFollow.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for following bots running on the same pc
*
*/
include("StarterConfig.js");

// D2BotFollow specific settings - for global settings see libs/StarterConfig.js
Starter.Config.JoinRetryDelay = 5; // Time in seconds to wait before next join attempt

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

/* Join game settings
	Format: "leader's profile": ["leecher 1 profile", "leecher 2 profile", ...]
	If you want everyone to join the same leader, use "leader's profile": ["all"]
	NOTE: Use PROFILE names (profile matches window title), NOT character/account names
	leader:leecher groups need to be divided by a comma
	example:
		let JoinSettings = {
			"lead1": ["follow1", "follow2"],
			"lead2": ["follow3", "follow4"]
		};
*/

const JoinSettings = {
	"Leader": ["Leecher"],
};

// No touchy!
include("json2.js");
include("polyfill.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
let sdk = require("./modules/sdk");
let Controls = require("./modules/Control");
let Overrides = require("./modules/Override");

if (typeof AdvancedConfig[me.profile] === "object") {
	Object.assign(Starter.Config, AdvancedConfig[me.profile]);
}

let lastGameTick, leader = "",
	announced = false,
	lastGame = [];

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
}

new Overrides.Override(Starter, Starter.receiveCopyData, function (orignal, mode, msg) {
	if (mode === 3) {
		Starter.isUp = (me.gameReady ? "yes" : "no");
		if (!me.gameReady) {
			return;
		}
		Starter.gameInfo.gameName = (me.gamename || "");
		Starter.gameInfo.gamePass = (me.gamepassword || "");
	} else {
		orignal(mode, msg);
	}
}).apply();

function joinCheck (leader) {
	D2Bot.requestGame(leader);
	delay(500);

	if (!Starter.joinInfo.inGame || (lastGame.length && lastGame.indexOf(Starter.joinInfo.gameName) === -1)) {
		D2Bot.printToConsole("Game is finished. Stopping join delay.");

		return true;
	}

	return false;
}

Starter.gameMaker = false;
Starter.locations[sdk.game.locations.WaitingInLine] = () => Controls.CancelCreateGame.click() && Controls.JoinGameWindow.click();
Starter.locations[sdk.game.locations.JoinGame] = () => Controls.CancelCreateGame.click() && Controls.JoinGameWindow.click();
Starter.locations[sdk.game.locations.LobbyChat] = () => {
	D2Bot.updateStatus("Lobby Chat");

	if (Starter.inGame) {
		if (Starter.LocationEvents.oogCheck()) return;

		print("updating runs");
		D2Bot.updateRuns();

		lastGameTick = getTickCount();
		Starter.gameCount += 1;
		Starter.lastGameStatus = "ready";
		Starter.inGame = false;
	}

	if (!Starter.chatActionsDone) {
		Starter.chatActionsDone = true;

		ControlAction.timeoutDelay("Chat delay", Starter.Config.ChatActionsDelay * 1e3);
		say("/j " + Starter.Config.JoinChannel);
		delay(1000);

		if (Starter.Config.FirstJoinMessage !== "") {
			say(Starter.Config.FirstJoinMessage);
			delay(500);
		}
	}

	Starter.LocationEvents.openJoinGameWindow();
};
Starter.locations[sdk.game.locations.JoinGame] = (loc) => {
	D2Bot.updateStatus("Join Game");

	if (!leader) {
		leader = [];

		for (let i in JoinSettings) {
			if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
				for (let j = 0; j < JoinSettings[i].length; j += 1) {
					if (JoinSettings[i][j] === me.profile || JoinSettings[i][j] === "all") {
						leader.push(i);
					}
				}
			}
		}
	}

	if (!leader || !leader.length && !announced) {
		print("No leader");
		D2Bot.printToConsole("No leader");
		announced = true;
		return;
	}

	JoinLoop2:
	for (let i = 0; i < 5; i += 1) {
		for (let j = 0; j < leader.length; j += 1) {
			Starter.joinInfo = {};
			D2Bot.requestGame(leader[j]);
			delay(100);

			if (Object.keys(Starter.joinInfo).length && Starter.joinInfo.gameName !== "" && (lastGame.indexOf(Starter.joinInfo.gameName) === -1 || Starter.lastGameStatus === "pending")) {
				Controls.JoinGameName.setText(Starter.joinInfo.gameName);
				Controls.JoinGamePass.setText(Starter.joinInfo.gamePass);

				if (Starter.lastGameStatus === "pending" || (Starter.gameInfo.error && DataFile.getStats().gameName === Starter.joinInfo.gameName)) {
					D2Bot.printToConsole("Failed to join game");
					ControlAction.timeoutDelay("Join Delay", Starter.Config.JoinRetryDelay * 1000, joinCheck(leader[j]));
					D2Bot.updateRuns();
					D2Bot.requestGame(leader[j]);
					delay(200);

					if (!Starter.joinInfo.inGame) {
						Starter.lastGameStatus = "ready";

						break;
					}
				}

				if (!Starter.joinInfo.inGame) {
					continue;
				}

				// Don't join immediately after previous game to avoid FTJ
				if (getTickCount() - lastGameTick < 5000) {
					ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
				}

				print("joining game " + Starter.joinInfo.gameName);

				if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].JoinDelay === "number") {
					ControlAction.timeoutDelay("Custom Join Delay", AdvancedConfig[me.profile].JoinDelay * 1e3);
				}

				me.blockMouse = true;

				DataFile.updateStats("gameName", Starter.joinInfo.gameName);
				Controls.JoinGame.click();

				me.blockMouse = false;

				lastGame.push(Starter.joinInfo.gameName);

				// Might need a fixed number. Right now it stores 1 game per leader.
				lastGame.length > leader.length && lastGame.shift();

				Starter.lastGameStatus = "pending";
				Starter.locationTimeout(15000, loc);

				break JoinLoop2;
			}
		}
	}
};
Starter.locations[sdk.game.locations.GameIsFull] = () => {
	D2Bot.printToConsole("Game is full");
	Controls.JoinGameWindow.click();
	lastGame.push(Starter.joinInfo.gameName);
	Starter.lastGameStatus = "ready";
};
Starter.locations[sdk.game.locations.TcpIpEnterIp] = () => {
	try {
		if (!leader) {
			leader = [];

			for (let i in JoinSettings) {
				if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
					for (let j = 0; j < JoinSettings[i].length; j += 1) {
						if (JoinSettings[i][j] === me.profile || JoinSettings[i][j] === "all") {
							leader.push(i);
						}
					}
				}
			}
		}

		mainLoop:
		for (let i = 0; i < 3; i++) {
			for (let j = 0; j < leader.length; j++) {
				D2Bot.requestGame(leader[j]);

				if (Object.keys(Starter.joinInfo).length && Starter.joinInfo.gameName !== "") {
					break mainLoop;
				}
			}
		}

		if (Controls.IPAdress.setText(Object.keys(Starter.joinInfo).length ? Starter.joinInfo.gameName : "localhost")
			&& Controls.IPAdressOk.click()
			&& Starter.locationTimeout(2e3, sdk.game.locations.TcpIpEnterIp)) {
			getLocation() === sdk.game.locations.CharSelect && login(me.profile);
		}
	} catch (e) {
		print(e);
	}
};

function main () {
	debugLog(me.profile);
	addEventListener("copydata", Starter.receiveCopyData);
	addEventListener("scriptmsg", Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, sdk.colors.D2Bot.Gray);
		}

		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				if (!Starter.inGame) {
					print("Ã¿c4Updating Status");
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();

					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus(Starter.profileInfo.charName + " | Game: " + (me.gamename || "singleplayer") + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		try {
			let loc = getLocation();
			(Starter.locations[loc] !== undefined) && Starter.locations[loc](loc);
		} catch (e) {
			console.error(e, "LOCATION: " + getLocation());
		}
		delay(1000);
	}
}
