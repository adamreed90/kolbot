/* eslint-disable no-fallthrough */
/**
*  @filename    D2BotLead.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for leader
*
*/
include("StarterConfig.js");

// - for global settings see libs/StarterConfig.js
// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("Polyfill.js");
include("common/misc.js");
include("common/util.js");
let sdk = require("./modules/sdk");
let Controls = require("./modules/Control");

if (typeof AdvancedConfig[me.profile] === "object") {
	Object.assign(Starter.Config, AdvancedConfig[me.profile]);
}

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
}

function main () {
	debugLog(me.profile);
	addEventListener("copydata", Starter.receiveCopyData);
	addEventListener("scriptmsg", Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;
			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, sdk.colors.D2Bot.Gray);
		}

		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				Starter.isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;

					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
				}

				D2Bot.updateStatus(Starter.profileInfo.charName + " | Game: " + (me.gamename || "singleplayer") + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		Starter.isUp = "no";

		try {
			let loc = getLocation();
			(Starter.locations[loc] !== undefined) && Starter.locations[loc](loc);
		} catch (e) {
			console.error(e, "LOCATION: " + getLocation());
		}
		delay(1000);
	}
}
